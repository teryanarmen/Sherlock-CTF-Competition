/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OrderBookInterface extends utils.Interface {
  contractName: "OrderBook";
  functions: {
    "amount()": FunctionFragment;
    "getTrade()": FunctionFragment;
    "postTrade(address,uint256)": FunctionFragment;
    "trader()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTrade", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postTrade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "trader", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trader", data: BytesLike): Result;

  events: {
    "TradePosted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TradePosted"): EventFragment;
}

export type TradePostedEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type TradePostedEventFilter = TypedEventFilter<TradePostedEvent>;

export interface OrderBook extends BaseContract {
  contractName: "OrderBook";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTrade(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    postTrade(
      _trader: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trader(overrides?: CallOverrides): Promise<[string]>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  getTrade(overrides?: CallOverrides): Promise<[string, BigNumber]>;

  postTrade(
    _trader: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trader(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    getTrade(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    postTrade(
      _trader: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trader(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TradePosted(address,uint256)"(
      arg0?: null,
      arg1?: null
    ): TradePostedEventFilter;
    TradePosted(arg0?: null, arg1?: null): TradePostedEventFilter;
  };

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    getTrade(overrides?: CallOverrides): Promise<BigNumber>;

    postTrade(
      _trader: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trader(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postTrade(
      _trader: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trader(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
