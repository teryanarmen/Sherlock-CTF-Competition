/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CollectRewardInterface extends utils.Interface {
  contractName: "CollectReward";
  functions: {
    "MULTIPLIER()": FunctionFragment;
    "ONE_DAY()": FunctionFragment;
    "blockDetails(uint256)": FunctionFragment;
    "collect(uint256)": FunctionFragment;
    "deploymentBlock()": FunctionFragment;
    "getProgramStartTime()": FunctionFragment;
    "maxDuration()": FunctionFragment;
    "programStartTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_DAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blockDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "programStartTime",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MULTIPLIER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_DAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgramStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programStartTime",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CollectReward extends BaseContract {
  contractName: "CollectReward";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectRewardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collect(
      _startTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploymentBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProgramStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    programStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  blockDetails(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collect(
    _startTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploymentBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getProgramStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

  programStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    blockDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(_startTime: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deploymentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    programStartTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    blockDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      _startTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploymentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    programStartTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      _startTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploymentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProgramStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    programStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
