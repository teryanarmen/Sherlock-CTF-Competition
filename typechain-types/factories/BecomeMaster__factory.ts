/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BecomeMaster, BecomeMasterInterface } from "../BecomeMaster";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "allocate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "allocator",
        type: "address",
      },
    ],
    name: "allocatorBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collectAllocations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "master",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "allocator",
        type: "address",
      },
    ],
    name: "sendAllocation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "takeMasterRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405233600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610996806100546000396000f3fe6080604052600436106100705760003560e01c8063abaa99161161004e578063abaa9916146100cc578063ee97f7f3146100d6578063f851a44014610101578063ffd40b561461012c57610070565b80638aa96f3814610075578063a1fc87a71461008c578063a2dea26f146100a3575b600080fd5b34801561008157600080fd5b5061008a610169565b005b34801561009857600080fd5b506100a16102b1565b005b3480156100af57600080fd5b506100ca60048036038101906100c591906106fc565b610415565b005b6100d46104e8565b005b3480156100e257600080fd5b506100eb610605565b6040516100f8919061074a565b60405180910390f35b34801561010d57600080fd5b5061011661062b565b604051610123919061074a565b60405180910390f35b34801561013857600080fd5b50610153600480360381019061014e9190610791565b610651565b60405161016091906107d7565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f09061084f565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025f9061084f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156102ae573d6000803e3d6000fd5b50565b3273ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906108bb565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a79061084f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161046057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156104e4573d6000803e3d6000fd5b5050565b34600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610558919061090a565b925050819055600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555032600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106c98261069e565b9050919050565b6106d9816106be565b81146106e457600080fd5b50565b6000813590506106f6816106d0565b92915050565b60006020828403121561071257610711610699565b5b6000610720848285016106e7565b91505092915050565b60006107348261069e565b9050919050565b61074481610729565b82525050565b600060208201905061075f600083018461073b565b92915050565b61076e81610729565b811461077957600080fd5b50565b60008135905061078b81610765565b92915050565b6000602082840312156107a7576107a6610699565b5b60006107b58482850161077c565b91505092915050565b6000819050919050565b6107d1816107be565b82525050565b60006020820190506107ec60008301846107c8565b92915050565b600082825260208201905092915050565b7f63616c6c6572206973206e6f7420746865206d61737465720000000000000000600082015250565b60006108396018836107f2565b915061084482610803565b602082019050919050565b600060208201905081810360008301526108688161082c565b9050919050565b7f63616c6c6572206973206e6f74207468652041646d696e000000000000000000600082015250565b60006108a56017836107f2565b91506108b08261086f565b602082019050919050565b600060208201905081810360008301526108d481610898565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610915826107be565b9150610920836107be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610955576109546108db565b5b82820190509291505056fea26469706673582212208b6b8cede886ff14e2690f58f2d1e61077f45210ac6e4c5b7e7a0cf103cadf8d64736f6c634300080b0033";

type BecomeMasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BecomeMasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BecomeMaster__factory extends ContractFactory {
  constructor(...args: BecomeMasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BecomeMaster";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<BecomeMaster> {
    return super.deploy(overrides || {}) as Promise<BecomeMaster>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BecomeMaster {
    return super.attach(address) as BecomeMaster;
  }
  connect(signer: Signer): BecomeMaster__factory {
    return super.connect(signer) as BecomeMaster__factory;
  }
  static readonly contractName: "BecomeMaster";
  public readonly contractName: "BecomeMaster";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BecomeMasterInterface {
    return new utils.Interface(_abi) as BecomeMasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BecomeMaster {
    return new Contract(address, _abi, signerOrProvider) as BecomeMaster;
  }
}
