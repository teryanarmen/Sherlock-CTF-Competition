/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FunnyChallenges,
  FunnyChallengesInterface,
} from "../FunnyChallenges";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "ch1",
        type: "string",
      },
      {
        internalType: "string",
        name: "ch2",
        type: "string",
      },
    ],
    name: "DontGiveUp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_param",
        type: "uint256",
      },
      {
        internalType: "bytes4",
        name: "_sel",
        type: "bytes4",
      },
    ],
    name: "func",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "magic_number",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052610f15806100136000396000f3fe6080604052600436106100345760003560e01c806353b5b27d14610039578063a9059cbb14610062578063ff5f6e2f1461007e575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b91906107a5565b61009a565b005b61007c6004803603810190610077919061071a565b610379565b005b61009860048036038101906100939190610756565b610552565b005b6040516020016100a990610a67565b6040516020818303038152906040528051906020012082826040516020016100d2929190610a26565b604051602081830303815290604052805190602001201415610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012090610ada565b60405180910390fd5b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506054816000815181106101ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16141580156102185750604681600081518110610204577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff1614155b801561026f575060438160008151811061025b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff1614155b6102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a590610afa565b60405180910390fd5b6003815111156102f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90610b5a565b60405180910390fd5b600060405160200161030490610a91565b6040516020818303038152906040528051906020012090506000868686866040516020016103359493929190610a3f565b604051602081830303815290604052805190602001209050808214156103705760016000806101000a81548160ff0219169083151502179055505b50505050505050565b60008054906101000a900460ff166103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd90610b1a565b60405180910390fd5b671bc16d674ec8000034146103da57600080fd5b6000816040516020016103ed9190610bba565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061046157507f841261bf11a58fbabcbcb7d4efd531da55121171dea830574030238956ac2eed60001b81145b6104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790610b3a565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16476040516104c690610a7c565b60006040518083038185875af1925050503d8060008114610503576040519150601f19603f3d011682016040523d82523d6000602084013e610508565b606091505b505090508061054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390610b9a565b60405180910390fd5b50505050565b670de0b6b3a764000034101561056757600080fd5b600081338460405160240161057d929190610ab1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1634836040516106049190610a0f565b60006040518083038185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b505090508061068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190610b7a565b60405180910390fd5b5050505050565b6000813590506106a081610e9a565b92915050565b6000813590506106b581610eb1565b92915050565b60008083601f8401126106cd57600080fd5b8235905067ffffffffffffffff8111156106e657600080fd5b6020830191508360018202830111156106fe57600080fd5b9250929050565b60008135905061071481610ec8565b92915050565b6000806040838503121561072d57600080fd5b600061073b85828601610691565b925050602061074c85828601610705565b9150509250929050565b60008060006060848603121561076b57600080fd5b600061077986828701610691565b935050602061078a86828701610705565b925050604061079b868287016106a6565b9150509250925092565b600080600080604085870312156107bb57600080fd5b600085013567ffffffffffffffff8111156107d557600080fd5b6107e1878288016106bb565b9450945050602085013567ffffffffffffffff81111561080057600080fd5b61080c878288016106bb565b925092505092959194509250565b61082381610c07565b82525050565b600061083482610bd5565b61083e8185610be0565b935061084e818560208601610c7e565b80840191505092915050565b60006108668385610bfc565b9350610873838584610c6f565b82840190509392505050565b600061088c600c83610beb565b915061089782610cb1565b602082019050919050565b60006108af601383610beb565b91506108ba82610cda565b602082019050919050565b60006108d2602183610beb565b91506108dd82610d03565b604082019050919050565b60006108f5601b83610beb565b915061090082610d52565b602082019050919050565b6000610918602983610beb565b915061092382610d7b565b604082019050919050565b600061093b600b83610beb565b915061094682610dca565b602082019050919050565b600061095e600383610bfc565b915061096982610df3565b600382019050919050565b6000610981600483610bfc565b915061098c82610e1c565b600482019050919050565b60006109a4600083610be0565b91506109af82610e45565b600082019050919050565b60006109c7600883610bfc565b91506109d282610e48565b600882019050919050565b60006109ea600f83610beb565b91506109f582610e71565b602082019050919050565b610a0981610c65565b82525050565b6000610a1b8284610829565b915081905092915050565b6000610a3382848661085a565b91508190509392505050565b6000610a4c82868861085a565b9150610a5982848661085a565b915081905095945050505050565b6000610a7282610951565b9150819050919050565b6000610a8782610997565b9150819050919050565b6000610a9c826109ba565b9150610aa782610974565b9150819050919050565b6000604082019050610ac6600083018561081a565b610ad36020830184610a00565b9392505050565b60006020820190508181036000830152610af38161087f565b9050919050565b60006020820190508181036000830152610b13816108a2565b9050919050565b60006020820190508181036000830152610b33816108c5565b9050919050565b60006020820190508181036000830152610b53816108e8565b9050919050565b60006020820190508181036000830152610b738161090b565b9050919050565b60006020820190508181036000830152610b938161092e565b9050919050565b60006020820190508181036000830152610bb3816109dd565b9050919050565b6000602082019050610bcf6000830184610a00565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000610c1282610c45565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610c9c578082015181840152602081019050610c81565b83811115610cab576000848401525b50505050565b7f4e4f2054727920616761696e0000000000000000000000000000000000000000600082015250565b7f4e6963652054727920627574204e4f4f4f4f2100000000000000000000000000600082015250565b7f796f752073686f756c6420666972737420736f6c766520446f6e74476976655560008201527f7000000000000000000000000000000000000000000000000000000000000000602082015250565b7f506c6561736520646f6e277420627275746520666f726365203a290000000000600082015250565b7f596f75207468696e6b206f6620627275746520666f7263653f206e6f7420612060008201527f676f6f6420696465610000000000000000000000000000000000000000000000602082015250565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4354460000000000000000000000000000000000000000000000000000000000600082015250565b7f4354462000000000000000000000000000000000000000000000000000000000600082015250565b50565b7f536865726c6f636b000000000000000000000000000000000000000000000000600082015250565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b610ea381610c07565b8114610eae57600080fd5b50565b610eba81610c19565b8114610ec557600080fd5b50565b610ed181610c65565b8114610edc57600080fd5b5056fea2646970667358221220271167ce8291cf33c6ae9af5dc0cfbb24d7aa8a087a62576dca0321358be8f5a64736f6c63430008040033";

type FunnyChallengesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FunnyChallengesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FunnyChallenges__factory extends ContractFactory {
  constructor(...args: FunnyChallengesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FunnyChallenges";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<FunnyChallenges> {
    return super.deploy(overrides || {}) as Promise<FunnyChallenges>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FunnyChallenges {
    return super.attach(address) as FunnyChallenges;
  }
  connect(signer: Signer): FunnyChallenges__factory {
    return super.connect(signer) as FunnyChallenges__factory;
  }
  static readonly contractName: "FunnyChallenges";
  public readonly contractName: "FunnyChallenges";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FunnyChallengesInterface {
    return new utils.Interface(_abi) as FunnyChallengesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FunnyChallenges {
    return new Contract(address, _abi, signerOrProvider) as FunnyChallenges;
  }
}
