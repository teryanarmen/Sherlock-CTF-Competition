/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PixelPavel, PixelPavelInterface } from "../PixelPavel";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bigPrizeWinningAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_smallAnswer",
        type: "uint8",
      },
    ],
    name: "crackCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "smallPrizeAnswer",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261012a341461007b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f476f7474612070617920746f20706c61792c20323938205765692e000000000081525060200191505060405180910390fd5b6103258061008a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063699418a214610046578063a4e0b0eb14610067578063d5367a3e14610098575b600080fd5b61004e6100b6565b604051808260ff16815260200191505060405180910390f35b6100966004803603602081101561007d57600080fd5b81019080803560ff1690602001909291905050506100bb565b005b6100a06102e9565b6040518082815260200191505060405180910390f35b602a81565b602a60ff168160ff1614610137576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f416e73776572206d75737420657175616c2034322e000000000000000000000081525060200191505060405180910390fd5b600080600060201b600036604051602001808463ffffffff19168152601c01838380828437808301925050509350505050604051602081830303815290604052806020019051604081101561018b57600080fd5b8101908080519060200190929190805190602001909291905050509150915080604051602001808281526020019150506040516020818303038152906040528051906020012061012a604051602001808281526020019150506040516020818303038152906040528051906020012014156102e457600047905060003273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4661696c656420746f2073656e6420457468657200000000000000000000000081525060200191505060405180910390fd5b50505b505050565b61012a8156fea2646970667358221220e5c2292bd14dfdf64e24e3c3c57c06327199f07372a02a93e1131b429b36456464736f6c63430007060033";

type PixelPavelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PixelPavelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PixelPavel__factory extends ContractFactory {
  constructor(...args: PixelPavelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PixelPavel";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<PixelPavel> {
    return super.deploy(overrides || {}) as Promise<PixelPavel>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PixelPavel {
    return super.attach(address) as PixelPavel;
  }
  connect(signer: Signer): PixelPavel__factory {
    return super.connect(signer) as PixelPavel__factory;
  }
  static readonly contractName: "PixelPavel";
  public readonly contractName: "PixelPavel";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PixelPavelInterface {
    return new utils.Interface(_abi) as PixelPavelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PixelPavel {
    return new Contract(address, _abi, signerOrProvider) as PixelPavel;
  }
}
