/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Padlock, PadlockInterface } from "../Padlock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_password",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tries",
        type: "uint256",
      },
    ],
    name: "BrokenPick",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "picker",
        type: "address",
      },
    ],
    name: "Opened",
    type: "event",
  },
  {
    inputs: [],
    name: "open",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "opened",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "passHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "passphrase",
        type: "string",
      },
    ],
    name: "pick1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pick2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "message",
        type: "bytes16",
      },
    ],
    name: "pick3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tries",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tumbler1",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tumbler2",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tumbler3",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260008060006101000a81548160ff02191690831515021790555060008060016101000a81548160ff02191690831515021790555060008060026101000a81548160ff02191690831515021790555060008060036101000a81548160ff0219169083151502179055503480156200007957600080fd5b5060405162000f1638038062000f1683398181016040528101906200009f919062000147565b80604051602001620000b29190620001c3565b6040516020818303038152906040528051906020012060028190555050620002fd565b6000620000ec620000e68462000205565b620001dc565b9050828152602081018484840111156200010557600080fd5b6200011284828562000251565b509392505050565b600082601f8301126200012c57600080fd5b81516200013e848260208601620000d5565b91505092915050565b6000602082840312156200015a57600080fd5b600082015167ffffffffffffffff8111156200017557600080fd5b62000183848285016200011a565b91505092915050565b600062000199826200023b565b620001a5818562000246565b9350620001b781856020860162000251565b80840191505092915050565b6000620001d182846200018c565b915081905092915050565b6000620001e8620001fb565b9050620001f6828262000287565b919050565b6000604051905090565b600067ffffffffffffffff821115620002235762000222620002bd565b5b6200022e82620002ec565b9050602081019050919050565b600081519050919050565b600081905092915050565b60005b838110156200027157808201518184015260208101905062000254565b8381111562000281576000848401525b50505050565b6200029282620002ec565b810181811067ffffffffffffffff82111715620002b457620002b3620002bd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c09806200030d6000396000f3fe6080604052600436106100915760003560e01c80638347f433116100595780638347f4331461016b578063849638cc14610194578063a13de3891461019e578063d9c1c4f8146101c9578063fcfff16f146101f457610091565b8063087230af1461009657806311571d60146100c1578063146e61ed146100ea57806351d2a116146101155780635f88eade14610140575b600080fd5b3480156100a257600080fd5b506100ab61020b565b6040516100b8919061086a565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610721565b61021e565b005b3480156100f657600080fd5b506100ff610308565b60405161010c9190610900565b60405180910390f35b34801561012157600080fd5b5061012a61030e565b604051610137919061086a565b60405180910390f35b34801561014c57600080fd5b5061015561031f565b604051610162919061086a565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906106f8565b610332565b005b61019c6104b7565b005b3480156101aa57600080fd5b506101b36105c7565b6040516101c09190610885565b60405180910390f35b3480156101d557600080fd5b506101de6105cd565b6040516101eb919061086a565b60405180910390f35b34801561020057600080fd5b506102096105e0565b005b600060019054906101000a900460ff1681565b60036001541115610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b906108c0565b60405180910390fd5b600254816040516020016102789190610838565b6040516020818303038152906040528051906020012014156102b35760016000806101000a81548160ff021916908315150217905550610305565b600160008154809291906102c690610a89565b91905055507f3d9c0f36b266e56655c4c3a9c9886ab251fb67a926e6050e55085c4aa60902866001546040516102fc9190610900565b60405180910390a15b50565b60015481565b60008054906101000a900460ff1681565b600060039054906101000a900460ff1681565b60036001541115610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036f906108c0565b60405180910390fd5b60008054906101000a900460ff166103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc906108a0565b60405180910390fd5b600060019054906101000a900460ff16610414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b906108a0565b60405180910390fd5b61694260f01b817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610462576001600060026101000a81548160ff0219169083151502179055506104b4565b6001600081548092919061047590610a89565b91905055507f3d9c0f36b266e56655c4c3a9c9886ab251fb67a926e6050e55085c4aa60902866001546040516104ab9190610900565b60405180910390a15b50565b600360015411156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f4906108c0565b60405180910390fd5b60008054906101000a900460ff1661054a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610541906108e0565b60405180910390fd5b6021341415610573576001600060016101000a81548160ff0219169083151502179055506105c5565b6001600081548092919061058690610a89565b91905055507f3d9c0f36b266e56655c4c3a9c9886ab251fb67a926e6050e55085c4aa60902866001546040516105bc9190610900565b60405180910390a15b565b60025481565b600060029054906101000a900460ff1681565b60008054906101000a900460ff1680156106065750600060019054906101000a900460ff165b801561061e5750600060029054906101000a900460ff165b61062757600080fd5b6001600060036101000a81548160ff0219169083151502179055507f0c05c795d374e6591ce49eb802df9a84a8b53459fad4fa03ac3085ca30afb75e33604051610671919061084f565b60405180910390a1565b600061068e61068984610940565b61091b565b9050828152602081018484840111156106a657600080fd5b6106b1848285610a16565b509392505050565b6000813590506106c881610bbc565b92915050565b600082601f8301126106df57600080fd5b81356106ef84826020860161067b565b91505092915050565b60006020828403121561070a57600080fd5b6000610718848285016106b9565b91505092915050565b60006020828403121561073357600080fd5b600082013567ffffffffffffffff81111561074d57600080fd5b610759848285016106ce565b91505092915050565b61076b81610998565b82525050565b61077a816109aa565b82525050565b610789816109e2565b82525050565b600061079a82610971565b6107a4818561098d565b93506107b4818560208601610a25565b80840191505092915050565b60006107cd60138361097c565b91506107d882610b41565b602082019050919050565b60006107f060118361097c565b91506107fb82610b6a565b602082019050919050565b600061081360118361097c565b915061081e82610b93565b602082019050919050565b61083281610a0c565b82525050565b6000610844828461078f565b915081905092915050565b60006020820190506108646000830184610762565b92915050565b600060208201905061087f6000830184610771565b92915050565b600060208201905061089a6000830184610780565b92915050565b600060208201905081810360008301526108b9816107c0565b9050919050565b600060208201905081810360008301526108d9816107e3565b9050919050565b600060208201905081810360008301526108f981610806565b9050919050565b60006020820190506109156000830184610829565b92915050565b6000610925610936565b90506109318282610a58565b919050565b6000604051905090565b600067ffffffffffffffff82111561095b5761095a610b01565b5b61096482610b30565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006109a3826109ec565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610a43578082015181840152602081019050610a28565b83811115610a52576000848401525b50505050565b610a6182610b30565b810181811067ffffffffffffffff82111715610a8057610a7f610b01565b5b80604052505050565b6000610a9482610a0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac757610ac6610ad2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7468696e67206f6e2074687265652e2e2e00000000000000000000000000600082015250565b7f4e6f206c6f636b7069636b73206c656674000000000000000000000000000000600082015250565b7f4e6f7468696e67206f6e2074776f2e2e2e000000000000000000000000000000600082015250565b610bc5816109b6565b8114610bd057600080fd5b5056fea2646970667358221220304d6dc1c1cf29a44741a186d695e53b19f4e9ad2b44c77b827cc28b51715c7c64736f6c63430008040033";

type PadlockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PadlockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Padlock__factory extends ContractFactory {
  constructor(...args: PadlockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Padlock";
  }

  deploy(
    _password: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Padlock> {
    return super.deploy(_password, overrides || {}) as Promise<Padlock>;
  }
  getDeployTransaction(
    _password: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_password, overrides || {});
  }
  attach(address: string): Padlock {
    return super.attach(address) as Padlock;
  }
  connect(signer: Signer): Padlock__factory {
    return super.connect(signer) as Padlock__factory;
  }
  static readonly contractName: "Padlock";
  public readonly contractName: "Padlock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PadlockInterface {
    return new utils.Interface(_abi) as PadlockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Padlock {
    return new Contract(address, _abi, signerOrProvider) as Padlock;
  }
}
