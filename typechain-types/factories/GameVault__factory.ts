/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GameVault, GameVaultInterface } from "../GameVault";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "keeper",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108a0806100606000396000f3fe6080604052600436106100555760003560e01c80632e1a7d4d1461005a578063aced166114610083578063b69ef8a8146100ae578063c71daccb146100d9578063d0e30db014610104578063db518db21461010e575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c919061056c565b610137565b005b34801561008f57600080fd5b506100986102be565b6040516100a59190610635565b60405180910390f35b3480156100ba57600080fd5b506100c36102e2565b6040516100d09190610690565b60405180910390f35b3480156100e557600080fd5b506100ee6102e8565b6040516100fb9190610690565b60405180910390f35b61010c6102f2565b005b34801561011a57600080fd5b506101356004803603810190610130919061052c565b61039b565b005b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bc90610670565b60405180910390fd5b60015481111561020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020190610650565b60405180910390fd5b806001600082825461021c919061071d565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161026a90610620565b60006040518083038185875af1925050503d80600081146102a7576040519150601f19603f3d011682016040523d82523d6000602084013e6102ac565b606091505b50509050806102ba57600080fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790610670565b60405180910390fd5b346001600082825461039291906106c7565b92505081905550565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042090610670565b60405180910390fd5b60015481111561046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590610650565b60405180910390fd5b8060016000828254610480919061071d565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff16826040516104ad90610620565b60006040518083038185875af1925050503d80600081146104ea576040519150601f19603f3d011682016040523d82523d6000602084013e6104ef565b606091505b50509050806104fd57600080fd5b505050565b6000813590506105118161083c565b92915050565b60008135905061052681610853565b92915050565b60008060408385031215610543576105426107bc565b5b600061055185828601610502565b925050602061056285828601610517565b9150509250929050565b600060208284031215610582576105816107bc565b5b600061059084828501610517565b91505092915050565b6105a281610751565b82525050565b60006105b56025836106b6565b91506105c0826107c1565b604082019050919050565b60006105d86000836106ab565b91506105e382610810565b600082019050919050565b60006105fb6013836106b6565b915061060682610813565b602082019050919050565b61061a81610783565b82525050565b600061062b826105cb565b9150819050919050565b600060208201905061064a6000830184610599565b92915050565b60006020820190508181036000830152610669816105a8565b9050919050565b60006020820190508181036000830152610689816105ee565b9050919050565b60006020820190506106a56000830184610611565b92915050565b600081905092915050565b600082825260208201905092915050565b60006106d282610783565b91506106dd83610783565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107125761071161078d565b5b828201905092915050565b600061072882610783565b915061073383610783565b9250828210156107465761074561078d565b5b828203905092915050565b600061075c82610763565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f43616e20796f75206f66666572206d6520616e20696e7374616c6c6d656e742060008201527f706c616e3f000000000000000000000000000000000000000000000000000000602082015250565b50565b7f596f75207368616c6c206e6f7420706173732e00000000000000000000000000600082015250565b61084581610751565b811461085057600080fd5b50565b61085c81610783565b811461086757600080fd5b5056fea2646970667358221220a398f7e85b76a2d185670c8a6c0e191a59d18df9c82a1ba121b10a1dcc6337e564736f6c63430008070033";

type GameVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GameVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GameVault__factory extends ContractFactory {
  constructor(...args: GameVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GameVault";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GameVault> {
    return super.deploy(overrides || {}) as Promise<GameVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GameVault {
    return super.attach(address) as GameVault;
  }
  connect(signer: Signer): GameVault__factory {
    return super.connect(signer) as GameVault__factory;
  }
  static readonly contractName: "GameVault";
  public readonly contractName: "GameVault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GameVaultInterface {
    return new utils.Interface(_abi) as GameVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GameVault {
    return new Contract(address, _abi, signerOrProvider) as GameVault;
  }
}
