/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lollercoaster, LollercoasterInterface } from "../Lollercoaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "randInt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d10f18dd14602d575b600080fd5b605660048036036020811015604157600080fd5b8101908080359060200190929190505050606c565b6040518082815260200191505060405180910390f35b60008160644381607857fe5b043073ffffffffffffffffffffffffffffffffffffffff160181609757fe5b06905091905056fea2646970667358221220e635abadc17eb448ee83012a0999189a8d049418f588166e43ff32e7cb4ff04c64736f6c63430007000033";

type LollercoasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LollercoasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lollercoaster__factory extends ContractFactory {
  constructor(...args: LollercoasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Lollercoaster";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lollercoaster> {
    return super.deploy(overrides || {}) as Promise<Lollercoaster>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lollercoaster {
    return super.attach(address) as Lollercoaster;
  }
  connect(signer: Signer): Lollercoaster__factory {
    return super.connect(signer) as Lollercoaster__factory;
  }
  static readonly contractName: "Lollercoaster";
  public readonly contractName: "Lollercoaster";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LollercoasterInterface {
    return new utils.Interface(_abi) as LollercoasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lollercoaster {
    return new Contract(address, _abi, signerOrProvider) as Lollercoaster;
  }
}
