/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Exploit, ExploitInterface } from "../Exploit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_challenge",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260405161045f38038061045f83398181016040528101906100259190610080565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100f2565b60008151905061007a816100db565b92915050565b60006020828403121561009257600080fd5b60006100a08482850161006b565b91505092915050565b60006100b4826100bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100e4816100a9565b81146100ef57600080fd5b50565b61035e806101016000396000f3fe6080604052600436106100225760003560e01c80634bb278f31461003d57610023565b5b600073ffffffffffffffffffffffffffffffffffffffff16ff5b34801561004957600080fd5b50610052610054565b005b6000630d8d210c60e01b3060405160240161006f9190610229565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600063d1f5789460e01b30836040516024016100eb929190610244565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315692cc266038d7ea4c68000836040518363ffffffff1660e01b81526004016101ab9190610274565b6000604051808303818588803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b50505050505050565b6101ea816102b2565b82525050565b60006101fb82610296565b61020581856102a1565b93506102158185602086016102e4565b61021e81610317565b840191505092915050565b600060208201905061023e60008301846101e1565b92915050565b600060408201905061025960008301856101e1565b818103602083015261026b81846101f0565b90509392505050565b6000602082019050818103600083015261028e81846101f0565b905092915050565b600081519050919050565b600082825260208201905092915050565b60006102bd826102c4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156103025780820151818401526020810190506102e7565b83811115610311576000848401525b50505050565b6000601f19601f830116905091905056fea26469706673582212205a85dcc7366fbe1484389f40c7b9d9dc5c75baabf24c0373dbf4d41d483dbf7364736f6c63430008040033";

type ExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit__factory extends ContractFactory {
  constructor(...args: ExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Exploit";
  }

  deploy(
    _challenge: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Exploit> {
    return super.deploy(_challenge, overrides || {}) as Promise<Exploit>;
  }
  getDeployTransaction(
    _challenge: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_challenge, overrides || {});
  }
  attach(address: string): Exploit {
    return super.attach(address) as Exploit;
  }
  connect(signer: Signer): Exploit__factory {
    return super.connect(signer) as Exploit__factory;
  }
  static readonly contractName: "Exploit";
  public readonly contractName: "Exploit";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new utils.Interface(_abi) as ExploitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit {
    return new Contract(address, _abi, signerOrProvider) as Exploit;
  }
}
