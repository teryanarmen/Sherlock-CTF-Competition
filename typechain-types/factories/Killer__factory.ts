/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Killer, KillerInterface } from "../Killer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_kill",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405260405160b838038060b8833981810160405281019060219190604d565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008151905060478160a3565b92915050565b600060208284031215605e57600080fd5b6000606a84828501603a565b91505092915050565b6000607c826083565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60aa816073565b811460b457600080fd5b5056fe";

type KillerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KillerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Killer__factory extends ContractFactory {
  constructor(...args: KillerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Killer";
  }

  deploy(
    _kill: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Killer> {
    return super.deploy(_kill, overrides || {}) as Promise<Killer>;
  }
  getDeployTransaction(
    _kill: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_kill, overrides || {});
  }
  attach(address: string): Killer {
    return super.attach(address) as Killer;
  }
  connect(signer: Signer): Killer__factory {
    return super.connect(signer) as Killer__factory;
  }
  static readonly contractName: "Killer";
  public readonly contractName: "Killer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KillerInterface {
    return new utils.Interface(_abi) as KillerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Killer {
    return new Contract(address, _abi, signerOrProvider) as Killer;
  }
}
