/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Spawn, SpawnInterface } from "../Spawn";

const _abi = [
  {
    inputs: [],
    name: "hi",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "i",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610164806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a99dca3f1461003b578063e5aa3d5814610045575b600080fd5b610043610063565b005b61004d61007c565b60405161005a9190610091565b60405180910390f35b600080815480929190610075906100b6565b9190505550565b60005481565b61008b816100ac565b82525050565b60006020820190506100a66000830184610082565b92915050565b6000819050919050565b60006100c1826100ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156100f4576100f36100ff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220a8f001ca236105265274bf594138aabeec3523475504ea5e3469e2a97dc9a6df64736f6c63430008040033";

type SpawnConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SpawnConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Spawn__factory extends ContractFactory {
  constructor(...args: SpawnConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Spawn";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Spawn> {
    return super.deploy(overrides || {}) as Promise<Spawn>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Spawn {
    return super.attach(address) as Spawn;
  }
  connect(signer: Signer): Spawn__factory {
    return super.connect(signer) as Spawn__factory;
  }
  static readonly contractName: "Spawn";
  public readonly contractName: "Spawn";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SpawnInterface {
    return new utils.Interface(_abi) as SpawnInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Spawn {
    return new Contract(address, _abi, signerOrProvider) as Spawn;
  }
}
