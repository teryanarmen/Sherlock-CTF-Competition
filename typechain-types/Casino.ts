/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CasinoInterface extends utils.Interface {
  contractName: "Casino";
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "attemptNumber()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "finished()": FunctionFragment;
    "gameOn()": FunctionFragment;
    "jackpot(uint256,uint256)": FunctionFragment;
    "lastWinTime()": FunctionFragment;
    "lastWinner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restart()": FunctionFragment;
    "roundNumber()": FunctionFragment;
    "tokenToWeiValue()": FunctionFragment;
    "totalDeposits()": FunctionFragment;
    "totalJackpot()": FunctionFragment;
    "totalPrize()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attemptNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "finished", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jackpot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastWinTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWinner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "restart", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roundNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToWeiValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attemptNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finished", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastWinTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToWeiValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Jackpot(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "Round(uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
    "Won(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Jackpot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Round"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Won"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { depositor: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type JackpotEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { winner: string; chance: BigNumber; num: BigNumber }
>;

export type JackpotEventFilter = TypedEventFilter<JackpotEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  { depositor: string; amount: BigNumber }
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export type RoundEvent = TypedEvent<[BigNumber], { round: BigNumber }>;

export type RoundEventFilter = TypedEventFilter<RoundEvent>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber],
  { withdrawer: string; amount: BigNumber }
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export type WonEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { winner: string; num: BigNumber; prize: BigNumber }
>;

export type WonEventFilter = TypedEventFilter<WonEvent>;

export interface Casino extends BaseContract {
  contractName: "Casino";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CasinoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attemptNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finished(overrides?: CallOverrides): Promise<[boolean]>;

    gameOn(overrides?: CallOverrides): Promise<[boolean]>;

    jackpot(
      num: BigNumberish,
      chance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastWinTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastWinner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenToWeiValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalJackpot(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPrize(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    guy: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attemptNumber(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finished(overrides?: CallOverrides): Promise<boolean>;

  gameOn(overrides?: CallOverrides): Promise<boolean>;

  jackpot(
    num: BigNumberish,
    chance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastWinTime(overrides?: CallOverrides): Promise<BigNumber>;

  lastWinner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundNumber(overrides?: CallOverrides): Promise<BigNumber>;

  tokenToWeiValue(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalJackpot(overrides?: CallOverrides): Promise<BigNumber>;

  totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    attemptNumber(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<void>;

    finished(overrides?: CallOverrides): Promise<boolean>;

    gameOn(overrides?: CallOverrides): Promise<boolean>;

    jackpot(
      num: BigNumberish,
      chance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastWinTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastWinner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restart(overrides?: CallOverrides): Promise<void>;

    roundNumber(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToWeiValue(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalJackpot(overrides?: CallOverrides): Promise<BigNumber>;

    totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      depositor?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(depositor?: null, amount?: null): DepositEventFilter;

    "Jackpot(address,uint256,uint256)"(
      winner?: null,
      chance?: null,
      num?: null
    ): JackpotEventFilter;
    Jackpot(winner?: null, chance?: null, num?: null): JackpotEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256)"(
      depositor?: null,
      amount?: null
    ): ReceivedEventFilter;
    Received(depositor?: null, amount?: null): ReceivedEventFilter;

    "Round(uint256)"(round?: null): RoundEventFilter;
    Round(round?: null): RoundEventFilter;

    "Withdrawal(address,uint256)"(
      withdrawer?: null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(withdrawer?: null, amount?: null): WithdrawalEventFilter;

    "Won(address,uint256,uint256)"(
      winner?: null,
      num?: null,
      prize?: null
    ): WonEventFilter;
    Won(winner?: null, num?: null, prize?: null): WonEventFilter;
  };

  estimateGas: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attemptNumber(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finished(overrides?: CallOverrides): Promise<BigNumber>;

    gameOn(overrides?: CallOverrides): Promise<BigNumber>;

    jackpot(
      num: BigNumberish,
      chance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastWinTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastWinner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundNumber(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToWeiValue(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalJackpot(overrides?: CallOverrides): Promise<BigNumber>;

    totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attemptNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jackpot(
      num: BigNumberish,
      chance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastWinTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToWeiValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalJackpot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPrize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
