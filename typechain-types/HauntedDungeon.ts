/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface HauntedDungeonInterface extends utils.Interface {
  contractName: "HauntedDungeon";
  functions: {
    "attack(address)": FunctionFragment;
    "combatting(address)": FunctionFragment;
    "currentFloor(address)": FunctionFragment;
    "currentMnstr(address,uint256)": FunctionFragment;
    "defense(address)": FunctionFragment;
    "effects(string,uint256)": FunctionFragment;
    "enterDungeon()": FunctionFragment;
    "increaseTreasure()": FunctionFragment;
    "insideDungeon(address)": FunctionFragment;
    "lives(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "prices(string)": FunctionFragment;
    "shopItems(uint256)": FunctionFragment;
    "spent(address)": FunctionFragment;
    "store(string)": FunctionFragment;
    "storeAccessLimit(address)": FunctionFragment;
    "treasure()": FunctionFragment;
    "turn()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "attack", values: [string]): string;
  encodeFunctionData(functionFragment: "combatting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentFloor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMnstr",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "defense", values: [string]): string;
  encodeFunctionData(
    functionFragment: "effects",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDungeon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTreasure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insideDungeon",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lives", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prices", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shopItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "spent", values: [string]): string;
  encodeFunctionData(functionFragment: "store", values: [string]): string;
  encodeFunctionData(
    functionFragment: "storeAccessLimit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasure", values?: undefined): string;
  encodeFunctionData(functionFragment: "turn", values?: undefined): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "combatting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMnstr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defense", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "effects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterDungeon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insideDungeon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lives", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shopItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeAccessLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "turn", data: BytesLike): Result;

  events: {
    "Talk(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Talk"): EventFragment;
}

export type TalkEvent = TypedEvent<
  [string, string],
  { _to: string; _text: string }
>;

export type TalkEventFilter = TypedEventFilter<TalkEvent>;

export interface HauntedDungeon extends BaseContract {
  contractName: "HauntedDungeon";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HauntedDungeonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attack(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    combatting(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    currentFloor(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentMnstr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defense(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    effects(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    enterDungeon(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseTreasure(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insideDungeon(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lives(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    shopItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    spent(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    store(
      _prod: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeAccessLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    treasure(overrides?: CallOverrides): Promise<[BigNumber]>;

    turn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attack(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  combatting(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  currentFloor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentMnstr(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defense(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  effects(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  enterDungeon(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseTreasure(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insideDungeon(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  shopItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  spent(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  store(
    _prod: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeAccessLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  treasure(overrides?: CallOverrides): Promise<BigNumber>;

  turn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attack(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    combatting(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    currentFloor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentMnstr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defense(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    effects(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    enterDungeon(overrides?: CallOverrides): Promise<void>;

    increaseTreasure(overrides?: CallOverrides): Promise<void>;

    insideDungeon(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    shopItems(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    spent(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    store(_prod: string, overrides?: CallOverrides): Promise<void>;

    storeAccessLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasure(overrides?: CallOverrides): Promise<BigNumber>;

    turn(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Talk(address,string)"(_to?: null, _text?: null): TalkEventFilter;
    Talk(_to?: null, _text?: null): TalkEventFilter;
  };

  estimateGas: {
    attack(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    combatting(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentFloor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentMnstr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defense(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    effects(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterDungeon(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseTreasure(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insideDungeon(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    shopItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spent(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    store(
      _prod: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeAccessLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasure(overrides?: CallOverrides): Promise<BigNumber>;

    turn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combatting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentFloor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMnstr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defense(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effects(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterDungeon(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseTreasure(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insideDungeon(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lives(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    store(
      _prod: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeAccessLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    turn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
