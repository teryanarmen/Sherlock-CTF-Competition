/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AmusementParkInterface extends utils.Interface {
  contractName: "AmusementPark";
  functions: {
    "BigSmile()": FunctionFragment;
    "_BumperCars(bytes,uint40,bytes)": FunctionFragment;
    "_Carousel(bytes)": FunctionFragment;
    "_HouseOfMirrors(bytes[])": FunctionFragment;
    "_Rollercoaster(bytes[])": FunctionFragment;
    "_leavePark()": FunctionFragment;
    "parkEntrance(bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BigSmile", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_BumperCars",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_Carousel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_HouseOfMirrors",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_Rollercoaster",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_leavePark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parkEntrance",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "BigSmile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_BumperCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_Carousel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_HouseOfMirrors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_Rollercoaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_leavePark", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parkEntrance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AmusementPark extends BaseContract {
  contractName: "AmusementPark";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AmusementParkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BigSmile(overrides?: CallOverrides): Promise<[boolean]>;

    _BumperCars(
      blueCar: BytesLike,
      redCar: BigNumberish,
      yellowCar: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _Carousel(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _HouseOfMirrors(
      houseLayout: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _Rollercoaster(
      ticket: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _leavePark(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parkEntrance(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BigSmile(overrides?: CallOverrides): Promise<boolean>;

  _BumperCars(
    blueCar: BytesLike,
    redCar: BigNumberish,
    yellowCar: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _Carousel(
    ticket: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _HouseOfMirrors(
    houseLayout: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _Rollercoaster(
    ticket: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _leavePark(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parkEntrance(
    ticket: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BigSmile(overrides?: CallOverrides): Promise<boolean>;

    _BumperCars(
      blueCar: BytesLike,
      redCar: BigNumberish,
      yellowCar: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    _Carousel(ticket: BytesLike, overrides?: CallOverrides): Promise<void>;

    _HouseOfMirrors(
      houseLayout: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    _Rollercoaster(
      ticket: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    _leavePark(overrides?: CallOverrides): Promise<void>;

    parkEntrance(ticket: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BigSmile(overrides?: CallOverrides): Promise<BigNumber>;

    _BumperCars(
      blueCar: BytesLike,
      redCar: BigNumberish,
      yellowCar: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _Carousel(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _HouseOfMirrors(
      houseLayout: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _Rollercoaster(
      ticket: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _leavePark(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parkEntrance(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BigSmile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BumperCars(
      blueCar: BytesLike,
      redCar: BigNumberish,
      yellowCar: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _Carousel(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _HouseOfMirrors(
      houseLayout: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _Rollercoaster(
      ticket: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _leavePark(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parkEntrance(
      ticket: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
