/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PadlockInterface extends utils.Interface {
  contractName: "Padlock";
  functions: {
    "open()": FunctionFragment;
    "opened()": FunctionFragment;
    "passHash()": FunctionFragment;
    "pick1(string)": FunctionFragment;
    "pick2()": FunctionFragment;
    "pick3(bytes16)": FunctionFragment;
    "tries()": FunctionFragment;
    "tumbler1()": FunctionFragment;
    "tumbler2()": FunctionFragment;
    "tumbler3()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "opened", values?: undefined): string;
  encodeFunctionData(functionFragment: "passHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "pick1", values: [string]): string;
  encodeFunctionData(functionFragment: "pick2", values?: undefined): string;
  encodeFunctionData(functionFragment: "pick3", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "tries", values?: undefined): string;
  encodeFunctionData(functionFragment: "tumbler1", values?: undefined): string;
  encodeFunctionData(functionFragment: "tumbler2", values?: undefined): string;
  encodeFunctionData(functionFragment: "tumbler3", values?: undefined): string;

  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opened", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "passHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pick1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pick2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pick3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tumbler1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tumbler2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tumbler3", data: BytesLike): Result;

  events: {
    "BrokenPick(uint256)": EventFragment;
    "Opened(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BrokenPick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Opened"): EventFragment;
}

export type BrokenPickEvent = TypedEvent<[BigNumber], { tries: BigNumber }>;

export type BrokenPickEventFilter = TypedEventFilter<BrokenPickEvent>;

export type OpenedEvent = TypedEvent<[string], { picker: string }>;

export type OpenedEventFilter = TypedEventFilter<OpenedEvent>;

export interface Padlock extends BaseContract {
  contractName: "Padlock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PadlockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    opened(overrides?: CallOverrides): Promise<[boolean]>;

    passHash(overrides?: CallOverrides): Promise<[string]>;

    pick1(
      passphrase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pick2(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pick3(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tries(overrides?: CallOverrides): Promise<[BigNumber]>;

    tumbler1(overrides?: CallOverrides): Promise<[boolean]>;

    tumbler2(overrides?: CallOverrides): Promise<[boolean]>;

    tumbler3(overrides?: CallOverrides): Promise<[boolean]>;
  };

  open(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  opened(overrides?: CallOverrides): Promise<boolean>;

  passHash(overrides?: CallOverrides): Promise<string>;

  pick1(
    passphrase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pick2(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pick3(
    message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tries(overrides?: CallOverrides): Promise<BigNumber>;

  tumbler1(overrides?: CallOverrides): Promise<boolean>;

  tumbler2(overrides?: CallOverrides): Promise<boolean>;

  tumbler3(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    open(overrides?: CallOverrides): Promise<void>;

    opened(overrides?: CallOverrides): Promise<boolean>;

    passHash(overrides?: CallOverrides): Promise<string>;

    pick1(passphrase: string, overrides?: CallOverrides): Promise<void>;

    pick2(overrides?: CallOverrides): Promise<void>;

    pick3(message: BytesLike, overrides?: CallOverrides): Promise<void>;

    tries(overrides?: CallOverrides): Promise<BigNumber>;

    tumbler1(overrides?: CallOverrides): Promise<boolean>;

    tumbler2(overrides?: CallOverrides): Promise<boolean>;

    tumbler3(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "BrokenPick(uint256)"(tries?: null): BrokenPickEventFilter;
    BrokenPick(tries?: null): BrokenPickEventFilter;

    "Opened(address)"(picker?: null): OpenedEventFilter;
    Opened(picker?: null): OpenedEventFilter;
  };

  estimateGas: {
    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    opened(overrides?: CallOverrides): Promise<BigNumber>;

    passHash(overrides?: CallOverrides): Promise<BigNumber>;

    pick1(
      passphrase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pick2(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pick3(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tries(overrides?: CallOverrides): Promise<BigNumber>;

    tumbler1(overrides?: CallOverrides): Promise<BigNumber>;

    tumbler2(overrides?: CallOverrides): Promise<BigNumber>;

    tumbler3(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    opened(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    passHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pick1(
      passphrase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pick2(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pick3(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tumbler1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tumbler2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tumbler3(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
