/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SloganInterface extends utils.Interface {
  contractName: "Slogan";
  functions: {
    "currentSloganOwner()": FunctionFragment;
    "setSlogan(string)": FunctionFragment;
    "slogan()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentSloganOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSlogan", values: [string]): string;
  encodeFunctionData(functionFragment: "slogan", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "currentSloganOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSlogan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slogan", data: BytesLike): Result;

  events: {};
}

export interface Slogan extends BaseContract {
  contractName: "Slogan";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SloganInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentSloganOwner(overrides?: CallOverrides): Promise<[string]>;

    setSlogan(
      _str: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slogan(overrides?: CallOverrides): Promise<[string]>;
  };

  currentSloganOwner(overrides?: CallOverrides): Promise<string>;

  setSlogan(
    _str: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slogan(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    currentSloganOwner(overrides?: CallOverrides): Promise<string>;

    setSlogan(_str: string, overrides?: CallOverrides): Promise<boolean>;

    slogan(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    currentSloganOwner(overrides?: CallOverrides): Promise<BigNumber>;

    setSlogan(
      _str: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slogan(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentSloganOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSlogan(
      _str: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slogan(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
