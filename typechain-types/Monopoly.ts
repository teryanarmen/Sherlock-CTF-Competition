/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MonopolyInterface extends utils.Interface {
  contractName: "Monopoly";
  functions: {
    "FACTOR()": FunctionFragment;
    "balance()": FunctionFragment;
    "landPrice()": FunctionFragment;
    "play(uint32,uint32)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FACTOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "landPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "FACTOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "landPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "Move(uint32)": EventFragment;
    "Roll(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Roll"): EventFragment;
}

export type MoveEvent = TypedEvent<[number], { arg0: number }>;

export type MoveEventFilter = TypedEventFilter<MoveEvent>;

export type RollEvent = TypedEvent<[number], { arg0: number }>;

export type RollEventFilter = TypedEventFilter<RollEvent>;

export interface Monopoly extends BaseContract {
  contractName: "Monopoly";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MonopolyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTOR(overrides?: CallOverrides): Promise<[string]>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    landPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    play(
      _seed1: BigNumberish,
      _seed2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  FACTOR(overrides?: CallOverrides): Promise<string>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  landPrice(overrides?: CallOverrides): Promise<BigNumber>;

  play(
    _seed1: BigNumberish,
    _seed2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FACTOR(overrides?: CallOverrides): Promise<string>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    landPrice(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _seed1: BigNumberish,
      _seed2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Move(uint32)"(arg0?: null): MoveEventFilter;
    Move(arg0?: null): MoveEventFilter;

    "Roll(uint16)"(arg0?: null): RollEventFilter;
    Roll(arg0?: null): RollEventFilter;
  };

  estimateGas: {
    FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    landPrice(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _seed1: BigNumberish,
      _seed2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    landPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      _seed1: BigNumberish,
      _seed2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
