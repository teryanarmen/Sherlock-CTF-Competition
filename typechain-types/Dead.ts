/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DeadInterface extends utils.Interface {
  contractName: "Dead";
  functions: {
    "balances(address)": FunctionFragment;
    "becomeKiller()": FunctionFragment;
    "canKill()": FunctionFragment;
    "changeKiller(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "kill()": FunctionFragment;
    "killed()": FunctionFragment;
    "killer()": FunctionFragment;
    "register()": FunctionFragment;
    "registered(address)": FunctionFragment;
    "timeToKill()": FunctionFragment;
    "withdrawRegistration()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "becomeKiller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canKill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeKiller",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "killed", values?: undefined): string;
  encodeFunctionData(functionFragment: "killer", values?: undefined): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(functionFragment: "registered", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timeToKill",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRegistration",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeKiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canKill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeKiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeToKill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRegistration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Dead extends BaseContract {
  contractName: "Dead";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    becomeKiller(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canKill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeKiller(
      _newKiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    killed(overrides?: CallOverrides): Promise<[boolean]>;

    killer(overrides?: CallOverrides): Promise<[string]>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registered(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    timeToKill(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawRegistration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  becomeKiller(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canKill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeKiller(
    _newKiller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  kill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  killed(overrides?: CallOverrides): Promise<boolean>;

  killer(overrides?: CallOverrides): Promise<string>;

  register(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  timeToKill(overrides?: CallOverrides): Promise<boolean>;

  withdrawRegistration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    becomeKiller(overrides?: CallOverrides): Promise<void>;

    canKill(overrides?: CallOverrides): Promise<void>;

    changeKiller(_newKiller: string, overrides?: CallOverrides): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    kill(overrides?: CallOverrides): Promise<void>;

    killed(overrides?: CallOverrides): Promise<boolean>;

    killer(overrides?: CallOverrides): Promise<string>;

    register(overrides?: CallOverrides): Promise<void>;

    registered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    timeToKill(overrides?: CallOverrides): Promise<boolean>;

    withdrawRegistration(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    becomeKiller(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canKill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeKiller(
      _newKiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    killed(overrides?: CallOverrides): Promise<BigNumber>;

    killer(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    timeToKill(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRegistration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    becomeKiller(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canKill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeKiller(
      _newKiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    killed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    killer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeToKill(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRegistration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
